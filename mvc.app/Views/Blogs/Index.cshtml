@model IEnumerable<mvc.dataaccess.Entities.Blog>

@{
    ViewData["Title"] = "Blog Articles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Hero Section */
    .blog-hero {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 4rem 0;
        margin-bottom: 3rem;
        text-align: center;
    }

        .blog-hero h1 {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .blog-hero p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

    /* Container */
    .blog-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Article Grid */
    .article-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 30px;
        margin-bottom: 4rem;
    }

    /* Article Card */
    .article-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

        .article-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        }

    /* Article Image */
    .article-image-container {
        width: 100%;
        height: 220px;
        overflow: hidden;
        position: relative;
    }

    .article-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .article-card:hover .article-image {
        transform: scale(1.05);
    }

    .no-image {
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #e0e0e0 0%, #bdbdbd 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #666;
        font-size: 1.2rem;
        font-style: italic;
    }

        .no-image i {
            font-size: 3rem;
            opacity: 0.3;
        }

    /* Article Content */
    .article-content {
        padding: 25px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .article-meta {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
        font-size: 0.9rem;
        color: #666;
    }

        .article-meta span {
            display: flex;
            align-items: center;
            gap: 5px;
        }

    .article-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0 0 15px;
        color: #1a1a1a;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .article-excerpt {
        font-size: 1rem;
        color: #555;
        line-height: 1.6;
        margin: 0 0 20px;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        flex-grow: 1;
    }

    /* Article Actions */
    .article-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: auto;
        padding-top: 15px;
        border-top: 1px solid #f0f0f0;
    }

    .article-link {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        color: #667eea;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .article-link:hover {
            color: #764ba2;
            transform: translateX(5px);
        }

    .content-type-badge {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .badge-image {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .badge-text {
        background-color: #f3e5f5;
        color: #7b1fa2;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 5rem 0;
    }

        .empty-state i {
            font-size: 5rem;
            color: #e0e0e0;
            margin-bottom: 2rem;
        }

        .empty-state h2 {
            color: #666;
            margin-bottom: 1rem;
        }

        .empty-state p {
            color: #999;
            margin-bottom: 2rem;
        }

    /* Admin Actions */
    .admin-actions {
        text-align: center;
        margin-bottom: 3rem;
    }

    .btn-create {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 30px;
        border-radius: 30px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
    }

        .btn-create:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
            color: white;
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .blog-hero h1 {
            font-size: 2rem;
        }

        .article-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .article-title {
            font-size: 1.3rem;
        }

        .article-actions {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }
    }

    @@media (max-width: 480px) {
        .blog-hero {
            padding: 2rem 0;
        }

        .article-content {
            padding: 20px;
        }
    }
</style>

<div class="blog-hero">
    <div class="blog-container">
        <h1>Blog Articles</h1>
        <p>Discover our latest posts and insights</p>
    </div>
</div>

<div class="blog-container">
    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
    {
        <div class="admin-actions">
            <a href="@Url.Action("AdminBlog", "Blogs")" class="btn-create">
                <i class="fas fa-cog"></i>Manage Blogs
            </a>
        </div>
    }

    @if (Model != null && Model.Any())
    {
        <div class="article-grid">
            @foreach (var item in Model)
            {
                <article class="article-card">
                    <div class="article-image-container">
                        @if (item.ImageData != null && item.ImageData.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(item.ImageData)"
                                 alt="@item.title"
                                 class="article-image" />
                        }
                        else
                        {
                            <div class="no-image">
                                <i class="fas fa-image"></i>
                            </div>
                        }
                    </div>

                    <div class="article-content">
                        <div class="article-meta">
                            <span>
                                <i class="fas fa-calendar-alt"></i>
                                @DateTime.Now.ToString("MMM dd, yyyy")
                            </span>
                            <span>
                                <i class="fas fa-clock"></i>
                                5 min read
                            </span>
                        </div>

                        <h2 class="article-title">@item.title</h2>

                        <p class="article-excerpt">@GetExcerpt(item.blog_content)</p>

                        <div class="article-actions">
                            <a asp-action="Details" asp-route-id="@item.Id" class="article-link">
                                Read More
                                <i class="fas fa-arrow-right"></i>
                            </a>

                            @{
                                var hasImage = item.blog_content != null && item.blog_content.Contains("<img");
                            }
                            <span class="content-type-badge @(hasImage ? "badge-image" : "badge-text")">
                                <i class="fas fa-@(hasImage ? "image" : "file-alt")"></i>
                                @(hasImage ? "Image" : "Text")
                            </span>
                        </div>
                    </div>
                </article>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-newspaper"></i>
            <h2>No Articles Yet</h2>
            <p>Check back soon for new content!</p>
            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
            {
                <a href="@Url.Action("Create", "Blogs")" class="btn-create">
                    <i class="fas fa-plus-circle"></i>Create First Article
                </a>
            }
        </div>
    }
</div>

@functions {
    public string GetExcerpt(string html, int maxLength = 200)
    {
        if (string.IsNullOrEmpty(html)) return "No content available";

        // Remove <img> and other HTML tags
        string cleaned = System.Text.RegularExpressions.Regex.Replace(html, "<img[^>]*>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        cleaned = System.Text.RegularExpressions.Regex.Replace(cleaned, "<.*?>", " ");
        cleaned = System.Text.RegularExpressions.Regex.Replace(cleaned, @"\s+", " ").Trim();

        return cleaned.Length > maxLength ? cleaned.Substring(0, maxLength) + "..." : cleaned;
    }
}
@model IEnumerable<mvc.dataaccess.Entities.Blog>

@{
    ViewData["Title"] = "Drug Articles";
}

<style>
    /* Custom styles to complement Bootstrap */
    .hover-shadow {
        transition: all 0.3s ease;
    }

        .hover-shadow:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }

    /* Hide images in article excerpts */
    .article-excerpt img {
        display: none !important;
    }

    /* Style for rich text content */
    .article-excerpt {
        max-height: 4.5em; /* Approximately 3 lines */
        overflow: hidden;
        position: relative;
        line-height: 1.5em;
    }

        /* Fade out effect at bottom */
        .article-excerpt::after {
            content: "...";
            position: absolute;
            bottom: 0;
            right: 0;
            padding-left: 40px;
            background: linear-gradient(to right, transparent, white 50%);
        }

        /* Remove extra spacing from rich text elements */
        .article-excerpt p {
            margin-bottom: 0.5rem;
        }

            .article-excerpt p:last-child {
                margin-bottom: 0;
            }

    /* Ensure all cards have same height */
    .card {
        height: 100%;
    }
</style>

<div class="py-4">
    <h1 class="text-center text-primary mb-5 text-uppercase">Drug Articles</h1>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <i class="bi bi-info-circle"></i> No articles available at this time.
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var item in Model)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm hover-shadow">
                        @if (item.ImageData != null)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(item.ImageData)"
                                 alt="@item.title"
                                 class="card-img-top"
                                 style="height: 200px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="bg-light d-flex align-items-center justify-content-center text-muted"
                                 style="height: 200px;">
                                <i class="bi bi-image fs-1"></i>
                                <span class="ms-2">No Image Available</span>
                            </div>
                        }
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-primary">@Html.DisplayFor(modelItem => item.title)</h5>
                            <div class="article-excerpt card-text flex-grow-1">
                                @Html.Raw(item.blog_content)
                            </div>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary mt-3">
                                Read More <i class="bi bi-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Process all article excerpts
        const excerpts = document.querySelectorAll('.article-excerpt');

        excerpts.forEach(function(excerpt) {
            // Create a temporary element to parse HTML properly
            const temp = document.createElement('div');
            temp.innerHTML = excerpt.innerHTML;

            // Remove all images
            temp.querySelectorAll('img').forEach(img => img.remove());

            // Remove all media elements
            temp.querySelectorAll('video, iframe, object, embed').forEach(el => el.remove());

            // Remove empty elements
            temp.querySelectorAll('p, div, span').forEach(el => {
                if (!el.textContent.trim()) {
                    el.remove();
                }
            });

            // Get clean text content
            let textContent = temp.textContent || temp.innerText || '';

            // Clean up the text
            textContent = textContent
                .replace(/\s+/g, ' ')  // Replace multiple spaces with single space
                .replace(/>\s+</g, '><')  // Remove spaces between tags
                .replace(/[\r\n]+/g, ' ')  // Replace line breaks with spaces
                .trim();  // Remove leading/trailing whitespace

            // Remove any standalone HTML entities or special characters
            textContent = textContent
                .replace(/^[>&<\s]+/, '')  // Remove leading special chars
                .replace(/[>&<\s]+$/, '');  // Remove trailing special chars

            // Truncate if needed
            const maxLength = 150;
            if (textContent.length > maxLength) {
                // Try to break at a word boundary
                const truncated = textContent.substring(0, maxLength);
                const lastSpace = truncated.lastIndexOf(' ');

                if (lastSpace > maxLength * 0.8) {
                    textContent = truncated.substring(0, lastSpace) + '...';
                } else {
                    textContent = truncated + '...';
                }
            }

            // Set the clean text
            excerpt.textContent = textContent || 'No content available';
        });
    });
</script>